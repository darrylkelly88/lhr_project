---
- name: Read the generated remediation playbook
  ansible.builtin.slurp:
    path: DISA_STIG_remediations.yml
  register: scap_fix_raw

# Extract only the tasks from the generated playbook (which is a list of plays)
- name: Extract remediation tasks from playbook
  ansible.builtin.set_fact:
    scap_fix_tasks_yaml: >-
      {{
        (
          (scap_fix_raw.content | b64decode | from_yaml)[0]['tasks']
        ) | to_nice_yaml
      }}

- name: Write tasks-only file for include_tasks
  ansible.builtin.copy:
    dest: /tmp/scap_fix_tasks.yml
    mode: '0600'
    content: "{{ scap_fix_tasks_yaml }}"

# Apply the remediations in the SAME run
- name: Apply DISA STIG remediations now
  block:
    - ansible.builtin.include_tasks: /tmp/scap_fix_tasks.yml
  become: true


- name: Compute SSG datastream for this OS
  ansible.builtin.set_fact:
    ssg_ds_file: >-
      {{ ssg_dir }}/{{ 
          (ansible_distribution == 'Ubuntu')
          | ternary('ssg-ubuntu' ~ (ansible_distribution_version | regex_replace('\\.', '')) ~ '-ds.xml',
                    'ssg-rhel' ~ ansible_distribution_major_version ~ '-ds.xml')
      }}

- name: Verify SCAP datastream exists
  ansible.builtin.stat:
    path: "{{ ssg_ds_file }}"
  register: ssg_ds_stat

- name: Fail if SSG datastream is missing
  ansible.builtin.assert:
    that:
      - ssg_ds_stat.stat.exists
    fail_msg: >
      Could not find '{{ ssg_ds_file }}'. Ensure 'scap-security-guide' is installed
      for this OS/version or adjust the mapping.

- name: Confirm the DISA STIG profile exists in this datastream
  ansible.builtin.command:
    cmd: oscap info --profiles "{{ ssg_ds_file }}"
  register: ssg_profiles
  changed_when: false

- name: Assert DISA STIG profile is available
  ansible.builtin.assert:
    that:
      - ssg_profile in ssg_profiles.stdout
    fail_msg: >
      Profile '{{ ssg_profile }}' not found in '{{ ssg_ds_file }}'.
      Available profiles:\n{{ ssg_profiles.stdout }}

- name: Run DISA STIG scan
  ansible.builtin.command:
    cmd: >
      oscap xccdf eval
      --profile "{{ ssg_profile }}"
      --results "{{ post_fix_results_file }}"
      --report "{{ post_fix_report_file }}"
      --fetch-remote-resources
      "{{ ssg_ds_file }}"
  ignore_errors: true  # scan will return non-zero if there are findings