- block:

    # --- Ensure tools exist (usually already present) ------------------------
    - name: Ensure grub2 tools are installed
      ansible.builtin.package:
        name:
          - grub2-tools
          - grub2-tools-extra
        state: present
      when: ansible_os_family == 'RedHat'

    # --- Configure /etc/grub.d/01_users -------------------------------------
    # Set superusers="<name>"
    - name: Ensure GRUB superuser line exists in /etc/grub.d/01_users
      ansible.builtin.lineinfile:
        path: /etc/grub.d/01_users
        regexp: '^\s*set\s+superusers='
        line: 'set superusers="{{ grub_superuser_name }}"'
        create: yes
        backup: yes
        mode: '0644'

    # Ensure 'export superusers' follows that line
    - name: Ensure 'export superusers' is present after superusers line
      ansible.builtin.lineinfile:
        path: /etc/grub.d/01_users
        regexp: '^\s*export\s+superusers\s*$'
        line: 'export superusers'
        insertafter: '^\s*set\s+superusers='
        create: yes
        backup: yes
        mode: '0644'

    # --- Set the GRUB password (creates user.cfg with PBKDF2 hash) ----------
    # grub2-setpassword prompts twice; feed it safely. (no_log hides the pass)
    - name: Configure GRUB superuser password (creates user.cfg)
      ansible.builtin.shell: |
        set -o pipefail
        printf '%s\n%s\n' "{{ grub_superuser_password }}" "{{ grub_superuser_password }}" | grub2-setpassword
      args:
        executable: /bin/bash
      register: grub_pw
      changed_when: grub_pw.rc == 0
      failed_when: grub_pw.rc not in [0]
      no_log: true

    # --- Work out grub.cfg target (BIOS vs UEFI) -----------------------------
    - name: Check if system is UEFI
      ansible.builtin.stat:
        path: /sys/firmware/efi
      register: efi_stat

    - name: Probe common grub.cfg paths
      ansible.builtin.set_fact:
        grub_cfg_candidates: >-
          {{
            (
              efi_stat.stat.exists
              | ternary(
                  [
                    "/boot/efi/EFI/{{ ansible_distribution | lower }}/grub.cfg",
                    "/boot/efi/EFI/redhat/grub.cfg",
                    "/boot/efi/EFI/rocky/grub.cfg",
                    "/boot/efi/EFI/almalinux/grub.cfg",
                    "/boot/efi/EFI/centos/grub.cfg",
                    "/boot/efi/EFI/fedora/grub.cfg"
                  ],
                  ["/boot/grub2/grub.cfg"]
                )
            )
          }}

    - name: Pick first existing grub.cfg target
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ grub_cfg_candidates }}"
      register: grub_cfg_stats

    - name: Set chosen grub.cfg path
      ansible.builtin.set_fact:
        grub_cfg_path: "{{ (grub_cfg_stats.results | selectattr('stat.exists') | map(attribute='stat.path') | list | first) | default('/boot/grub2/grub.cfg') }}"

    # --- Regenerate grub.cfg with our changes --------------------------------
    - name: Regenerate GRUB configuration
      ansible.builtin.command:
        cmd: grub2-mkconfig -o "{{ grub_cfg_path }}"
      register: grub_mkcfg
      changed_when: "'Generating grub configuration file' in grub_mkcfg.stdout"

  when: ansible_os_family == 'RedHat'
