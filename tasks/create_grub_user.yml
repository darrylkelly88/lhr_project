- block:
    # --- Inputs --------------------------------------------------------------
    - name: Assert GRUB superuser inputs
      ansible.builtin.assert:
        that:
          - grub_superuser_name is defined
          - grub_superuser_name | length > 0
          - grub_superuser_name | lower not in ['root','admin','administrator']
          - grub_superuser_password is defined
          - (grub_superuser_password | string | length) > 0
        fail_msg: "Set non-generic 'grub_superuser_name' and a strong 'grub_superuser_password'."

    # --- Tools ---------------------------------------------------------------
    - name: Ensure grub2 tools are installed
      ansible.builtin.package:
        name:
          - grub2-tools
          - grub2-tools-extra
        state: present

    # --- /etc/grub.d/01_users ------------------------------------------------
    - name: Ensure GRUB superuser is set
      ansible.builtin.lineinfile:
        path: /etc/grub.d/01_users
        regexp: '^\s*set\s+superusers='
        line: 'set superusers="{{ grub_superuser_name }}"'
        create: yes
        mode: '0644'
        backup: yes

    - name: Ensure 'export superusers' follows superusers line
      ansible.builtin.lineinfile:
        path: /etc/grub.d/01_users
        regexp: '^\s*export\s+superusers\s*$'
        line: 'export superusers'
        insertafter: '^\s*set\s+superusers='
        create: yes
        mode: '0644'
        backup: yes

    # --- Choose user.cfg location (pick existing EFI vendor dir; else BIOS) ---
    - name: Detect UEFI
      ansible.builtin.stat:
        path: /sys/firmware/efi
      register: efi_stat

    - name: Build candidate EFI vendor dirs
      ansible.builtin.set_fact:
        efi_vendor_dirs: >-
          {{
            [
              '/boot/efi/EFI/' ~ (ansible_distribution | lower),
              '/boot/efi/EFI/redhat',
              '/boot/efi/EFI/rocky',
              '/boot/efi/EFI/almalinux',
              '/boot/efi/EFI/centos',
              '/boot/efi/EFI/fedora'
            ] if efi_stat.stat.exists else []
          }}

    - name: Stat candidate EFI vendor dirs
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ efi_vendor_dirs }}"
      register: efi_dir_stats
      when: efi_vendor_dirs | length > 0

    - name: Choose user.cfg path
      ansible.builtin.set_fact:
        efi_vendor_dir: >-
          {{
            (
              efi_dir_stats.results | default([])
              | selectattr('stat.exists')
              | selectattr('stat.isdir','defined')
              | selectattr('stat.isdir')
              | map(attribute='stat.path')
              | list
              | first
            )
          }}
        grub_usercfg_path: >-
          {{
            (efi_vendor_dir is defined and efi_vendor_dir)
            | ternary(efi_vendor_dir ~ '/user.cfg', '/boot/grub2/user.cfg')
          }}

    - name: Check if user.cfg already exists
      ansible.builtin.stat:
        path: "{{ grub_usercfg_path }}"
      register: usercfg_stat

    # --- Generate PBKDF2 hash & write user.cfg (only if needed) --------------
    - name: Generate PBKDF2 hash for GRUB password
      ansible.builtin.shell: |
        set -o pipefail
        printf '%s\n%s\n' "{{ grub_superuser_password }}" "{{ grub_superuser_password }}" \
          | grub2-mkpasswd-pbkdf2 \
          | awk -F': ' '/PBKDF2 hash of your password is/ {print $2}'
      args:
        executable: /bin/bash
      register: grub_pw_hash
      no_log: true
      changed_when: false
      when: rotate_grub_password | default(false) | bool or (not usercfg_stat.stat.exists)

    - name: Write user.cfg with hashed password
      ansible.builtin.copy:
        dest: "{{ grub_usercfg_path }}"
        owner: root
        group: root
        mode: '0600'
        content: "GRUB2_PASSWORD={{ grub_pw_hash.stdout | trim }}\n"
      when: rotate_grub_password | default(false) | bool or (not usercfg_stat.stat.exists)

    # --- Regenerate GRUB configuration --------------------------------------
    # RHEL-family uses /boot/grub2/grub.cfg for both BIOS and UEFI.
    - name: Regenerate GRUB configuration
      ansible.builtin.command:
        cmd: grub2-mkconfig -o /boot/grub2/grub.cfg
      register: grub_mkcfg
      changed_when: "'Generating grub configuration file' in (grub_mkcfg.stdout | default(''))"
  when: ansible_os_family == 'RedHat'
  become: yes
