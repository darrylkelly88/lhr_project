---
- block:
    - name: Check that lvm_size is defined and not empty
      ansible.builtin.assert:
        that:
          - lvm_size is defined
          - lvm_size is not none
          - (lvm_size | string | length) > 0
        fail_msg: "You must define 'lvm_size' (e.g. 10g) in vars.yml."
        success_msg: "lvm_size is defined and valid."

    - name: Check that vol_disks is defined and has at least one disk
      ansible.builtin.assert:
        that:
          - vol_disks is defined
          - vol_disks is not none
          - vol_disks | length > 0
        fail_msg: "You must define 'vol_disks' with at least one disk (e.g. ['/dev/sdb']) in vars.yml."
        success_msg: "vol_disks is defined and has at least one disk."
  when: configure_storage | default(false) | bool


- name: Check that veeam_user_password variable is defined and not empty
  ansible.builtin.assert:
    that:
      - veeam_user_password is defined
      - veeam_user_password is not none
    fail_msg: "You must define 'veeam_user_password' in vars.yml."
    success_msg: "veeam_user_password is defined and valid."

- name: Check that serveradmin_password is defined and not empty if creating admin user
  ansible.builtin.assert:
    that:
      - serveradmin_password is defined
      - serveradmin_password is not none
      - (serveradmin_password | string | length) > 0
    fail_msg: "You must define 'serveradmin_password' in vars.yml."
    success_msg: "serveradmin_password is defined and valid."
  when: create_admin_user | default(false) | bool
  
- name: Assert GRUB superuser name is set and not generic
  ansible.builtin.assert:
    that:
      - grub_superuser_name is defined
      - grub_superuser_name | length > 0
      - grub_superuser_name | lower not in ['root', 'admin', 'administrator']
    fail_msg: >
      Set 'grub_superuser_name' to a non-generic value (not root/admin/administrator).

- name: Assert GRUB superuser password is set
  ansible.builtin.assert:
    that:
      - grub_superuser_password is defined
      - (grub_superuser_password | string | length) > 0
    fail_msg: "Set 'grub_superuser_password' to a strong passphrase."


- name: Ensure SCAP content is installed
  ansible.builtin.package:
    name: scap-security-guide
    state: present

- name: Ensure pexpect is available
  ansible.builtin.package:
    name: python3-pexpect
    state: present

- name: Ensure reports directory exists beside the playbook
  ansible.builtin.file:
    path: "{{ playbook_dir }}/reports"
    state: directory
    mode: "0750"

- name: Check if pre-fix report already exists
  ansible.builtin.stat:
    path: "{{ pre_fix_report_file }}"
  register: pre_fix_report_stat

- block:
  - name: Compute SSG datastream for this OS
    ansible.builtin.set_fact:
      ssg_ds_file: >-
        {{ ssg_dir }}/{{ 
            (ansible_distribution == 'Ubuntu')
            | ternary('ssg-ubuntu' ~ (ansible_distribution_version | regex_replace('\\.', '')) ~ '-ds.xml',
                      'ssg-rhel' ~ ansible_distribution_major_version ~ '-ds.xml')
        }}

  - name: Verify SCAP datastream exists
    ansible.builtin.stat:
      path: "{{ ssg_ds_file }}"
    register: ssg_ds_stat

  - name: Fail if SSG datastream is missing
    ansible.builtin.assert:
      that:
        - ssg_ds_stat.stat.exists
      fail_msg: >
        Could not find '{{ ssg_ds_file }}'. Ensure 'scap-security-guide' is installed
        for this OS/version or adjust the mapping.

  - name: Confirm the DISA STIG profile exists in this datastream
    ansible.builtin.command:
      cmd: oscap info --profiles "{{ ssg_ds_file }}"
    register: ssg_profiles
    changed_when: false

  - name: Assert DISA STIG profile is available
    ansible.builtin.assert:
      that:
        - ssg_profile in ssg_profiles.stdout
      fail_msg: >
        Profile '{{ ssg_profile }}' not found in '{{ ssg_ds_file }}'.
        Available profiles:\n{{ ssg_profiles.stdout }}

  - name: Run DISA STIG scan
    ansible.builtin.command:
      cmd: >
        oscap xccdf eval
        --profile "{{ ssg_profile }}"
        --results "{{ pre_fix_results_file }}"
        --report "{{ pre_fix_report_file }}"
        --fetch-remote-resources
        "{{ ssg_ds_file }}"
    ignore_errors: true 
  when: not (pre_fix_report_stat.stat.exists | default(false))