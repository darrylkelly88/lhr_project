---
- name: Check that lvm_size variable is defined and not empty
  ansible.builtin.assert:
    that:
      - lvm_size is defined
      - lvm_size is not none
    fail_msg: "You must define 'lvm_size' (e.g. 10g)."
    success_msg: "lvm_size is defined and valid."

- name: Check that vol_disks variable is defined and contains at least one disk
  ansible.builtin.assert:
    that:
      - vol_disks is defined
      - vol_disks is not none
    fail_msg: "You must define 'vol_disks' with at least one disk (e.g. ['/dev/sdb'])."
    success_msg: "vol_disks is defined and has at least one disk."

- name: Check that veeam_user_password variable is defined and not empty
  ansible.builtin.assert:
    that:
      - veeam_user_password is defined
      - veeam_user_password is not none
    fail_msg: "You must define 'veeam_user_password'."
    success_msg: "veeam_user_password is defined and valid."

- name: Ensure SCAP content is installed
  ansible.builtin.package:
    name: scap-security-guide
    state: present




# - name: scan system for NIST 800-171 compliance and generate results file
#   command: "oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_cui --results initial_NIST_800-171_scan_results.xml --fetch-remote-resources /usr/share/xml/scap/ssg/content/ssg-rhel8-ds.xml"
#   ignore_errors: true

# - name: generate an ansible fix for NIST 800-171 compliance based on results in initial_NIST_800-171_scan_results.xml
#   command: "oscap xccdf generate fix --fix-type ansible --profile xccdf_org.ssgproject.content_profile_cui --output NIST_800-171_remediations.yml initial_NIST_800-171_scan_results.xml"

# - name: create compliance report
#   command: "oscap xccdf generate report initial_NIST_800-171_scan_results.xml > initial_NIST_800-171_compliance_report.html"



- name: Compute SSG datastream for this OS
  ansible.builtin.set_fact:
    ssg_ds_file: >-
      {{ ssg_dir }}/{{ 
          (ansible_distribution == 'Ubuntu')
          | ternary('ssg-ubuntu' ~ (ansible_distribution_version | regex_replace('\\.', '')) ~ '-ds.xml',
                    'ssg-rhel' ~ ansible_distribution_major_version ~ '-ds.xml')
      }}

- name: Verify SCAP datastream exists
  ansible.builtin.stat:
    path: "{{ ssg_ds_file }}"
  register: ssg_ds_stat

- name: Fail if SSG datastream is missing
  ansible.builtin.assert:
    that:
      - ssg_ds_stat.stat.exists
    fail_msg: >
      Could not find '{{ ssg_ds_file }}'. Ensure 'scap-security-guide' is installed
      for this OS/version or adjust the mapping.

- name: Confirm the DISA STIG profile exists in this datastream
  ansible.builtin.command:
    cmd: oscap info --profiles "{{ ssg_ds_file }}"
  register: ssg_profiles
  changed_when: false

- name: Assert DISA STIG profile is available
  ansible.builtin.assert:
    that:
      - ssg_profile in ssg_profiles.stdout
    fail_msg: >
      Profile '{{ ssg_profile }}' not found in '{{ ssg_ds_file }}'.
      Available profiles:\n{{ ssg_profiles.stdout }}

- name: Run DISA STIG scan
  ansible.builtin.command:
    cmd: >
      oscap xccdf eval
      --profile "{{ ssg_profile }}"
      --results "{{ results_file }}"
      --report "{{ report_file }}"
      --fetch-remote-resources
      "{{ ssg_ds_file }}"
  ignore_errors: true  # scan will return non-zero if there are findings

- name: Generate Ansible remediation from scan results
  ansible.builtin.command:
    cmd: >
      oscap xccdf generate fix
      --fix-type ansible
      --profile "{{ ssg_profile }}"
      --output "{{ remediation_file }}"
      "{{ results_file }}"